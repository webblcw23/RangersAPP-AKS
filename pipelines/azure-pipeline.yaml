trigger: none

pool:
  vmImage: "ubuntu-latest"

variables:
  ACR_NAME: "rangersdockeracr"
  IMAGE_NAME: "rangersapp"
  DOCKER_REGISTRY: "$(ACR_NAME).azurecr.io"
  IMAGE_TAG_DEV: "dev-001"
  IMAGE_TAG_STAGING: "staging-001"
  IMAGE_TAG_PROD: "prod-001"

stages:
  - stage: BuildAndScrape
    displayName: "‚öôÔ∏è Build App & Scrape Data"
    jobs:
      - job: BuildScrape
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.10"
              addToPath: true

          - script: |
              python -m venv venv
              source venv/bin/activate
              pip install pandas
              python Data/scrape_scores.py
            displayName: "Scrape Latest Match Results"

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: "Data/rangers-results.json"
              artifactName: "rangers-results"
            displayName: "Publish Results JSON"

  - stage: DockerPush
    displayName: "üê≥ Build & Push Docker Image"
    dependsOn: BuildAndScrape
    jobs:
      - job: DockerBuild
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              artifactName: "rangers-results"
              downloadPath: "Data"

          - script: mv Data/rangers-results/rangers-results.json Data/rangers-results.json
            displayName: "Move JSON to Expected Path"

          - task: Docker@2
            displayName: "Build and Push Docker Image with Multiple Tags"
            inputs:
              containerRegistry: "rangers-docker-acr"  # ‚úÖ ACR service connection
              repository: "$(IMAGE_NAME)"
              command: "buildAndPush"
              Dockerfile: "Dockerfile"
              buildContext: "."

  - stage: DeployToAKS
    displayName: "‚úÖ Deploy to AKS"
    dependsOn: DockerPush
    jobs:
      - job: DeployJob
        displayName: "Deploy Rangers App to AKS"
        steps:
          - task: TerraformInstaller@1
            inputs:
              terraformVersion: "1.7.5"

          - task: AzureCLI@2
            displayName: "Terraform Init"
            inputs:
              azureSubscription: "rangers-arm-service-connection"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                terraform init -reconfigure
              workingDirectory: terraform/
            env:
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(ARM_TENANT_ID)

          - script: |
              terraform apply -auto-approve \
            workingDirectory: terraform/
            displayName: "Terraform Apply"
            env:
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(ARM_TENANT_ID)

          - task: Kubernetes@1
            displayName: "Apply Kubernetes Manifests to AKS"
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'rangers-aks-service-connection'
              command: apply
              useConfigurationFile: true
              configuration: k8s/*.yaml

          - script: |
              echo "Fetching external IP for Rangers app..."
              kubectl get svc rangersapp-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
            displayName: "Get AKS External IP"